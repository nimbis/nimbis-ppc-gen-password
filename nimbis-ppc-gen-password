#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This code is similar to the ppc-gen-password script included with
# the pypicloud package. The difference is that this program generates
# a hashed password with a dramatically smaller number of rounds than
# passlib uses by default, (which is well over 500,000).
#
# The large number of rounds in passlib's default is to make it that
# much harder to attack the hashed password, (such as with a
# dictionary), by making each attempt necessarily slower. The problem
# we've found is that this also makes the pypicloud server much
# slower, (particularly for requests that need nothing but a redirect
# to the fallback server).
#
# The idea of this code is to generate a hashed password with many
# fewer rounds. This should only be used where the increased ease of a
# dictionary attack is an acceptable risk.


import getpass
import passlib
from passlib.context import LazyCryptContext
from passlib.utils import sys_bits

pwd_context = LazyCryptContext(
    # choose some reasonbly strong schemes
    schemes=["sha512_crypt", "sha256_crypt"],

    # set some useful global options
    default="sha256_crypt" if sys_bits < 64 else "sha512_crypt",
    all__vary_rounds = 0.1,

    # Keep the number of rounds short, for a quicker-to-be-checked key
    sha512_crypt__max_rounds = 1000,
    sha256_crypt__max_rounds = 1000,
    )


def _gen_password():
    """ Prompt user for a password twice for safety """
    print "Warning: Generating a hashed password with a minimal number of rounds."
    print "Use ppc-gen-password instead for a stronger hash if necessary."
    while True:
        password = getpass.getpass()
        verify = getpass.getpass()
        if password == verify:
            return pwd_context.encrypt(password)
        else:
            print "Passwords do not match!"

print "{}".format(_gen_password())

